#Step 1: Backend Setup

const express = require('express');
const mongoose = require('mongoose');
const bodyParser = require('body-parser');
const cors = require('cors');

const app = express();
const PORT = 5000;

// Middleware
app.use(cors());
app.use(bodyParser.json());

// MongoDB Connection
mongoose.connect('mongodb://localhost:27017/digital-restaurant', {
    useNewUrlParser: true,
    useUnifiedTopology: true
}).then(() => {
    console.log('Connected to MongoDB');
}).catch(err => {
    console.error('Database connection error:', err);
});

// Routes
app.get('/', (req, res) => {
    res.send('Welcome to Digital Restaurant API');
});

// Start Server
app.listen(PORT, () => {
    console.log(`Server running on http://localhost:${PORT}`);
});
#Step 2: Database Models
const mongoose = require('mongoose');

const UserSchema = new mongoose.Schema({
    name: String,
    email: { type: String, unique: true },
    password: String,
});

module.exports = mongoose.model('User', UserSchema);
const mongoose = require('mongoose');

const MenuSchema = new mongoose.Schema({
    name: String,
    description: String,
    price: Number,
    image: String,
});

module.exports = mongoose.model('Menu', MenuSchema);
const mongoose = require('mongoose');

const OrderSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User' },
    items: [{ menuId: mongoose.Schema.Types.ObjectId, quantity: Number }],
    totalAmount: Number,
    status: { type: String, default: 'Pending' },
});

module.exports = mongoose.model('Order', OrderSchema);
#API ROUTES
const express = require('express');
const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');
const User = require('../models/User');

const router = express.Router();

// User Signup
router.post('/signup', async (req, res) => {
    try {
        const { name, email, password } = req.body;
        const hashedPassword = await bcrypt.hash(password, 10);
        const user = new User({ name, email, password: hashedPassword });
        await user.save();
        res.status(201).send('User registered successfully');
    } catch (err) {
        res.status(500).send('Error registering user');
    }
});

// User Login
router.post('/login', async (req, res) => {
    try {
        const { email, password } = req.body;
        const user = await User.findOne({ email });
        if (!user || !(await bcrypt.compare(password, user.password))) {
            return res.status(401).send('Invalid email or password');
        }
        const token = jwt.sign({ userId: user._id }, 'secretKey');
        res.json({ token });
    } catch (err) {
        res.status(500).send('Error logging in');
    }
});

module.exports = router;const express = require('express');
const Menu = require('../models/Menu');

const router = express.Router();

// Get All Menu Items
router.get('/', async (req, res) => {
    try {
        const menu = await Menu.find();
        res.json(menu);
    } catch (err) {
        res.status(500).send('Error fetching menu');
    }
});

module.exports = router;const express = require('express');
const Order = require('../models/Order');

const router = express.Router();

// Place an Order
router.post('/', async (req, res) => {
    try {
        const { userId, items } = req.body;
        const totalAmount = items.reduce((sum, item) => sum + item.quantity * item.price, 0);
        const order = new Order({ userId, items, totalAmount });
        await order.save();
        res.status(201).send('Order placed successfully');
    } catch (err) {
        res.status(500).send('Error placing order');
    }
});

module.exports = router;const userRoutes = require('./routes/userRoutes');
const menuRoutes = require('./routes/menuRoutes');
const orderRoutes = require('./routes/orderRoutes');

app.use('/api/users', userRoutes);
app.use('/api/menu', menuRoutes);
app.use('/api/orders', orderRoutes);
#Step 4: Frontend Setup
import React from 'react';
import { NavigationContainer } from '@react-navigation/native';
import { createStackNavigator } from '@react-navigation/stack';
import LoginScreen from './screens/LoginScreen';
import MenuScreen from './screens/MenuScreen';
import OrderScreen from './screens/OrderScreen';

const Stack = createStackNavigator();

export default function App() {
    return (
        <NavigationContainer>
            <Stack.Navigator initialRouteName="Login">
                <Stack.Screen name="Login" component={LoginScreen} />
                <Stack.Screen name="Menu" component={MenuScreen} />
                <Stack.Screen name="Orders" component={OrderScreen} />
            </Stack.Navigator>
        </NavigationContainer>
    );
}
#Step 5: Login Screen
import React, { useState } from 'react';
import { View, TextInput, Button, Text, StyleSheet } from 'react-native';

export default function LoginScreen({ navigation }) {
    const [email, setEmail] = useState('');
    const [password, setPassword] = useState('');

    const handleLogin = async () => {
        try {
            const response = await fetch('http://localhost:5000/api/users/login', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ email, password }),
            });
            const data = await response.json();
            if (data.token) {
                navigation.navigate('Menu');
            } else {
                alert('Login failed');
            }
        } catch (err) {
            alert('Error logging in');
        }
    };

    return (
        <View style={styles.container}>
            <TextInput
                style={styles.input}
                placeholder="Email"
                value={email}
                onChangeText={setEmail}
            />
            <TextInput
                style={styles.input}
                placeholder="Password"
                value={password}
                onChangeText={setPassword}
                secureTextEntry
            />
            <Button title="Login" onPress={handleLogin} />
        </View>
    );
}

const styles = StyleSheet.create({
    container: {
        flex: 1,
        justifyContent: 'center',
        padding: 20,
    },
    input: {
        marginBottom: 10,
        padding: 10,
        borderWidth: 1,
        borderColor: '#ccc',
        borderRadius: 5,
    },
});
# Payment 
const express = require('express');
const Stripe = require('stripe');
const router = express.Router();

// Stripe Secret Key
const stripe = Stripe('your_secret_key_here');

// Create Payment Intent
router.post('/create-payment', async (req, res) => {
    const { amount, currency } = req.body;
    try {
        const paymentIntent = await stripe.paymentIntents.create({
            amount,
            currency,
            payment_method_types: ['card'],
        });
        res.status(200).json({ clientSecret: paymentIntent.client_secret });
    } catch (error) {
        console.error('Error creating payment intent:', error);
        res.status(500).send('Payment failed');
    }
});

module.exports = router;const paymentRoutes = require('./routes/paymentRoutes');
app.use('/api/payment', paymentRoutes);import React from 'react';
import { StripeProvider } from '@stripe/stripe-react-native';
import { NavigationContainer } from '@react-navigation/native';
import { createStackNavigator } from '@react-navigation/stack';
import PaymentScreen from './screens/PaymentScreen';

const Stack = createStackNavigator();

export default function App() {
    return (
        <StripeProvider publishableKey="your_publishable_key_here">
            <NavigationContainer>
                <Stack.Navigator initialRouteName="Payment">
                    <Stack.Screen name="Payment" component={PaymentScreen} />
                </Stack.Navigator>
            </NavigationContainer>
        </StripeProvider>
    );
}import React, { useState } from 'react';
import { View, Button, TextInput, StyleSheet, Alert } from 'react-native';
import { CardField, useStripe } from '@stripe/stripe-react-native';

export default function PaymentScreen() {
    const [amount, setAmount] = useState('');
    const { confirmPayment } = useStripe();

    const handlePayment = async () => {
        try {
            // Create a payment intent on the server
            const response = await fetch('http://localhost:5000/api/payment/create-payment', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ amount: parseInt(amount) * 100, currency: 'usd' }),
            });
            const { clientSecret } = await response.json();

            // Confirm the payment
            const { error } = await confirmPayment(clientSecret, {
                paymentMethodType: 'Card',
                billingDetails: {
                    email: 'customer@example.com',
                },
            });

            if (error) {
                Alert.alert('Payment failed', error.message);
            } else {
                Alert.alert('Payment successful', 'Your payment was successful!');
            }
        } catch (error) {
            console.error('Payment error:', error);
            Alert.alert('Payment error', 'Something went wrong. Please try again.');
        }
    };

    return (
        <View style={styles.container}>
            <TextInput
                style={styles.input}
                placeholder="Enter amount"
                value={amount}
                onChangeText={setAmount}
                keyboardType="numeric"
            />
            <CardField
                postalCodeEnabled={true}
                placeholder={{ number: '4242 4242 4242 4242' }}
                cardStyle={{ backgroundColor: '#FFFFFF' }}
                style={styles.cardField}
            />
            <Button title="Pay Now" onPress={handlePayment} />
        </View>
    );
}

const styles = StyleSheet.create({
    container: {
        flex: 1,
        justifyContent: 'center',
        padding: 20,
    },
    input: {
        marginBottom: 20,
        padding: 10,
        borderWidth: 1,
        borderColor: '#ccc',
        borderRadius: 5,
    },
    cardField: {
        height: 50,
        marginVertical: 30,
    },
});
