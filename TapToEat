#Step 1: Backend Setup

const express = require('express');
const mongoose = require('mongoose');
const bodyParser = require('body-parser');
const cors = require('cors');

const app = express();
const PORT = 5000;

// Middleware
app.use(cors());
app.use(bodyParser.json());

// MongoDB Connection
mongoose.connect('mongodb://localhost:27017/digital-restaurant', {
    useNewUrlParser: true,
    useUnifiedTopology: true
}).then(() => {
    console.log('Connected to MongoDB');
}).catch(err => {
    console.error('Database connection error:', err);
});

// Routes
app.get('/', (req, res) => {
    res.send('Welcome to Digital Restaurant API');
});

// Start Server
app.listen(PORT, () => {
    console.log(`Server running on http://localhost:${PORT}`);
});
#Step 2: Database Models
const mongoose = require('mongoose');

const UserSchema = new mongoose.Schema({
    name: String,
    email: { type: String, unique: true },
    password: String,
});

module.exports = mongoose.model('User', UserSchema);
const mongoose = require('mongoose');

const MenuSchema = new mongoose.Schema({
    name: String,
    description: String,
    price: Number,
    image: String,
});

module.exports = mongoose.model('Menu', MenuSchema);
const mongoose = require('mongoose');

const OrderSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User' },
    items: [{ menuId: mongoose.Schema.Types.ObjectId, quantity: Number }],
    totalAmount: Number,
    status: { type: String, default: 'Pending' },
});

module.exports = mongoose.model('Order', OrderSchema);
#API ROUTES
const express = require('express');
const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');
const User = require('../models/User');

const router = express.Router();

// User Signup
router.post('/signup', async (req, res) => {
    try {
        const { name, email, password } = req.body;
        const hashedPassword = await bcrypt.hash(password, 10);
        const user = new User({ name, email, password: hashedPassword });
        await user.save();
        res.status(201).send('User registered successfully');
    } catch (err) {
        res.status(500).send('Error registering user');
    }
});

// User Login
router.post('/login', async (req, res) => {
    try {
        const { email, password } = req.body;
        const user = await User.findOne({ email });
        if (!user || !(await bcrypt.compare(password, user.password))) {
            return res.status(401).send('Invalid email or password');
        }
        const token = jwt.sign({ userId: user._id }, 'secretKey');
        res.json({ token });
    } catch (err) {
        res.status(500).send('Error logging in');
    }
});

module.exports = router;const express = require('express');
const Menu = require('../models/Menu');

const router = express.Router();

// Get All Menu Items
router.get('/', async (req, res) => {
    try {
        const menu = await Menu.find();
        res.json(menu);
    } catch (err) {
        res.status(500).send('Error fetching menu');
    }
});

module.exports = router;const express = require('express');
const Order = require('../models/Order');

const router = express.Router();

// Place an Order
router.post('/', async (req, res) => {
    try {
        const { userId, items } = req.body;
        const totalAmount = items.reduce((sum, item) => sum + item.quantity * item.price, 0);
        const order = new Order({ userId, items, totalAmount });
        await order.save();
        res.status(201).send('Order placed successfully');
    } catch (err) {
        res.status(500).send('Error placing order');
    }
});

module.exports = router;const userRoutes = require('./routes/userRoutes');
const menuRoutes = require('./routes/menuRoutes');
const orderRoutes = require('./routes/orderRoutes');

app.use('/api/users', userRoutes);
app.use('/api/menu', menuRoutes);
app.use('/api/orders', orderRoutes);
